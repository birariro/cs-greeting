[
{
  "웹 통신의 큰 흐름: https://www.google.com/ 을 접속할 때 일어나는 일": "브라우저가 URL을 파싱하여 HTTP 요청 메시지를 생성하고 OS에 전송 요청을 합니다. DNS Lookup을 통해 도메인에 매칭되는 IP를 찾습니다. 요청은 프로토콜 스택에 의해 패킷으로 분할되어 전송됩니다. 패킷은 인터넷을 통해 웹 서버에 도착하고, 웹 서버는 요청을 처리한 후 응답을 클라이언트에 반환합니다."
},
{
  "TCP와 UDP의 차이점에 대해서 설명": "TCP는 연결 지향형 프로토콜로 데이터 전송의 신뢰성을 보장하기 위해 흐름 제어, 혼잡 제어, 오류 제어 기능을 제공합니다. UDP는 비연결형 프로토콜로 데이터 전송 속도가 빠르지만 신뢰성을 보장하지 않습니다. TCP는 파일 전송, 이메일 등 신뢰성이 중요한 서비스에 사용되고, UDP는 실시간 스트리밍, 온라인 게임 등 연속성이 중요한 서비스에 사용됩니다."
},
{
  "TCP 3, 4 way handshake에 대해서 설명": "TCP 3-way handshake는 클라이언트와 서버 간의 연결을 설정하는 과정으로, 클라이언트가 SYN 패킷을 보내고, 서버가 SYN-ACK 패킷으로 응답한 후, 클라이언트가 ACK 패킷을 보내 연결이 성립됩니다. TCP 4-way handshake는 연결을 종료하는 과정으로, 클라이언트가 FIN 패킷을 보내고, 서버가 ACK 패킷을 보내 연결 해제를 확인한 후, 서버도 FIN 패킷을 보내고 클라이언트가 ACK 패킷을 보내 연결이 종료됩니다."
},
{
  "HTTP와 HTTPS의 차이점에 대해서 설명": "HTTP는 데이터를 평문으로 전송하여 중간에서 패킷을 가로채거나 수정할 수 있습니다. HTTPS는 SSL/TLS 프로토콜을 통해 데이터를 암호화하여 전송하므로 보안이 강화됩니다. HTTPS는 인증서를 사용해 서버의 신원을 확인하고, 암호화된 통신 채널을 설정하여 데이터의 무결성과 기밀성을 보장합니다."
},
{
  "HTTPS에 대해서 설명하고 SSL Handshake에 대해서 설명": "HTTPS는 HTTP에 보안 계층(SSL/TLS)을 추가한 프로토콜로, 데이터를 암호화하여 전송합니다. SSL Handshake는 클라이언트와 서버가 서로를 인증하고 세션 키를 교환하여 암호화된 통신을 설정하는 과정입니다. 클라이언트는 서버의 인증서를 확인하고, 서버의 공개키로 세션 키를 암호화하여 전송합니다. 서버는 이를 복호화하여 세션 키를 얻고, 이후 통신은 이 세션 키로 암호화되어 전송됩니다."
},
{
  "GET과 POST의 차이점에 대해서 설명": "GET 요청은 서버로부터 데이터를 조회하는 데 사용되며, URL에 쿼리 스트링을 포함할 수 있습니다. GET 요청은 캐싱될 수 있고, 브라우저 히스토리에 남습니다. POST 요청은 서버에 데이터를 전송하여 리소스를 생성하거나 수정하는 데 사용되며, 요청 데이터는 보통 요청 본문에 포함됩니다. POST 요청은 캐싱되지 않고, 히스토리에 남지 않습니다."
},
{
  "HTTP 메서드와 이것이 하는 역할에 대해서 설명": "HTTP 메서드는 서버와 클라이언트 간의 상호작용을 정의합니다. GET은 리소스를 조회하고, POST는 새로운 리소스를 생성하며, PUT은 리소스를 수정하거나 생성하고, DELETE는 리소스를 삭제하며, PATCH는 리소스의 부분적인 수정을 수행하고, OPTIONS는 서버가 지원하는 메서드를 확인합니다."
},
{
  "RESTful이란 무엇이며, 이것에 대해서 아는대로 설명(보충필요)": "RESTful은 REST 원칙을 따르는 웹 서비스를 의미합니다. REST는 자원을 URI로 식별하고, HTTP 메서드를 사용하여 자원에 대한 작업을 수행합니다. RESTful 서비스는 상태가 없으며, 클라이언트-서버 구조를 따르고, 캐시를 사용할 수 있으며, 계층화된 시스템 아키텍처를 가집니다. RESTful 서비스는 자체 설명적 메시지를 사용하여 상호작용을 단순화하고, HATEOAS를 통해 클라이언트가 동적으로 서버의 변경에 대응할 수 있게 합니다."
},
{
  "CORS란 무엇이며 이것에 대해서 설명": "CORS(Cross-Origin Resource Sharing)는 웹 브라우저에서 다른 도메인의 리소스에 접근할 수 있도록 허용하는 메커니즘입니다. 기본적으로 웹 브라우저는 보안상의 이유로 동일 출처 정책(Same-Origin Policy)을 따릅니다. CORS는 서버가 특정 도메인에서의 요청을 허용하는 HTTP 헤더를 추가하여 이 정책을 우회할 수 있게 합니다. 프리플라이트 요청은 실제 요청을 보내기 전에 OPTIONS 메서드로 서버의 CORS 설정을 확인하는 과정입니다."
},
{
  "OSI 7계층과 그 존재 이유, TCP/IP 4계층에 대해 설명": "OSI 7계층은 네트워크 통신을 7개의 계층으로 분리하여 각 계층이 독립적으로 동작하고 상호작용할 수 있도록 설계된 모델입니다. 이는 문제 발생 시 특정 계층에서 문제를 파악하고 해결하기 쉽게 합니다. TCP/IP 모델은 실질적으로 사용되는 네트워크 모델로, 4개의 계층(응용, 전송, 인터넷, 네트워크 접근)으로 구성됩니다."
},
{
  "웹 서버 소프트웨어(Apache, Nginx)는 OSI 7계층 중 어디서 작동하는지 설명": "Apache와 Nginx는 OSI 7계층 중 애플리케이션 계층에서 동작합니다. 이들은 HTTP, HTTPS 등의 프로토콜을 통해 클라이언트 요청을 처리하고 응답을 반환하는 역할을 합니다. HTTP는 애플리케이션 계층 프로토콜이며, TCP/IP 프로토콜 스택을 통해 전송됩니다."
},
{
  "웹 서버 소프트웨어(Apache, Nginx)의 서버 간 라우팅 기능은 OSI 7계층 중 어디서 작동하는지 설명": "Apache와 Nginx의 서버 간 라우팅 기능은 OSI 7계층 중 4계층(전송 계층)과 7계층(애플리케이션 계층)에서 동작합니다. 전송 계층에서는 TCP/UDP 포트 정보를 기반으로 라우팅을 수행하고, 애플리케이션 계층에서는 HTTP URI 등을 기반으로 라우팅을 수행합니다."
},
{
  "DNS란 무엇이며 어떻게 동작하는지 설명": "DNS(Domain Name System)는 도메인 이름을 IP 주소로 변환하는 시스템입니다. 사용자가 도메인 이름으로 웹사이트에 접속할 때, DNS 서버는 해당 도메인의 IP 주소를 조회하여 사용자의 요청을 올바른 서버로 전달합니다. 이 과정은 계층적 구조를 통해 이루어지며, 루트 서버, 최상위 도메인(TLD) 서버, 권한 있는 네임 서버로 구성됩니다."
},
{
  "로드 밸런싱이란 무엇이며 어떻게 동작하는지 설명": "로드 밸런싱은 여러 서버에 트래픽을 분산시켜 시스템의 성능과 가용성을 향상시키는 기술입니다. 로드 밸런서는 클라이언트 요청을 여러 서버에 균등하게 분배하여 각 서버의 부하를 최소화하고, 장애 발생 시 트래픽을 다른 서버로 전환하여 서비스의 연속성을 보장합니다. 대표적인 로드 밸런싱 알고리즘으로는 라운드 로빈, 가중치 기반 라운드 로빈, IP 해시 등이 있습니다."
},
{
  "리버스 프록시와 포워드 프록시의 차이점에 대해서 설명": "리버스 프록시는 클라이언트의 요청을 받아 백엔드 서버에 전달하고, 서버의 응답을 클라이언트에 반환하는 역할을 합니다. 주로 로드 밸런싱, SSL 암호화, 캐싱 등의 기능을 제공합니다. 포워드 프록시는 클라이언트가 외부 서버에 접근할 때 중간에서 요청을 대리하여 외부 서버로 전달하고, 응답을 클라이언트에 반환합니다. 주로 보안, 접근 제어, 캐싱 등의 목적으로 사용됩니다."
},
{
  "세션과 쿠키의 차이점에 대해서 설명": "세션은 서버에 저장되는 사용자 정보로, 사용자의 상태를 유지하는 데 사용됩니다. 세션 ID는 클라이언트의 쿠키에 저장되어 서버와의 통신에 사용됩니다. 쿠키는 클라이언트에 저장되는 작은 데이터 파일로, 서버가 클라이언트의 상태를 유지하거나 추적하는 데 사용됩니다. 쿠키는 만료 기간을 가질 수 있으며, 서버나 클라이언트에서 설정할 수 있습니다."
}
]
