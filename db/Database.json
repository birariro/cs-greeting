[
{
  "데이터 베이스의 트렌젝션": "트랜잭션이란 데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위라고 할 수 있으며, 트랜잭션에는 여러개의 연산이 수행될 수 있습니다.  트랜잭션은 수행중에 한 작업이라도 실패하면 전부 실패하고, 모두 성공해야 성공이라고 할 수 있습니다. "
},
{
  "데이터베이스의 트렌젝션 격리수준": "트랜잭션 격리수준은 고립도와 성능의 트레이드 오프를 조절합니다 READ UNCOMMITTED: 다른 트랜잭션에서 커밋되지 않은 내용도 참조할 수 있다.  READ COMMITTED: 다른 트랜잭션에서 커밋된 내용만 참조할 수 있다.  REPEATABLE READ: 트랜잭션에 진입하기 이전에 커밋된 내용만 참조할 수 있다.  SERIALIZABLE: 트랜잭션에 진입하면 락을 걸어 다른 트랜잭션이 접근하지 못하게 한다. (성능 매우 떨어짐)"},
{
  "데이터베이스 샤딩 (Database Sharding)": "데이터베이스 샤딩은 대규모 데이터베이스를 수평으로 분할하여 여러 서버에 분산 저장하는 방법입니다.  각 샤드는 독립된 데이터베이스로 작동하며, 이를 통해 데이터베이스의 성능과 확장성을 크게 향상시킬 수 있습니다.  샤딩은 특히 대규모 트래픽과 데이터를 처리해야 하는 시스템에서 유용합니다. "
},
{
  "트랜잭션에 대해서 설명": "트랜잭션이란 데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위입니다. 트랜잭션에는 여러 개의 연산이 수행될 수 있으며, 하나의 연산이 실패하면 전체 트랜잭션이 실패하고, 모든 연산이 성공해야만 트랜잭션이 성공합니다."
},
{
  "ACID에 대해서 설명": "ACID는 트랜잭션이 안전하게 수행됨을 보장하기 위한 성질을 나타냅니다. Atomicity(원자성), Consistency(일관성), Isolation(고립성), Durability(내구성)으로 구성됩니다."
},
{
  "트랜잭션 격리 수준(Transaction Isolation Levels)에 대해서 설명": "트랜잭션 격리수준은 여러 트랜잭션이 동시에 실행될 때 각 트랜잭션이 서로에게 미치는 영향을 조절하는 수준입니다. READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE이 네 가지의 격리 수준이 있습니다."
},
{
  "정규화에 대해서 설명": "정규화는 데이터베이스 설계에서 데이터 중복을 최소화하고 데이터의 일관성을 유지하기 위한 과정입니다."
},
{
  "JOIN에 대해서 설명": "JOIN은 SQL에서 여러 테이블 간의 관계를 설정하여 데이터를 검색하거나 연결하는 작업을 말합니다."
},
{
  "RDBMS vs NOSQL에 대해서 설명": "RDBMS는 관계형 데이터베이스로 SQL을 사용하여 데이터를 관리하며, 구조화된 데이터를 저장합니다. NOSQL은 비관계형 데이터베이스로, 자유로운 형태의 데이터를 저장하며, 수평적 확장과 분산 처리를 지원합니다."
},
{
  "Redis에 대해서 간단히 설명": "Redis는 key-value 형식의 NOSQL 데이터베이스로, 싱글 스레드로 동작하며 다양한 데이터 구조를 지원합니다. 주로 세션 관리나 캐싱에 사용됩니다."
},
{
  "Redis와 Memcached의 차이에 대해서 설명": "Redis는 싱글 스레드로 동작하며 다양한 자료구조를 지원하고, 스냅샷과 AOF 로그를 통해 데이터를 보존할 수 있습니다. Memcached는 멀티스레드로 동작하며 문자열 형태의 데이터만 저장할 수 있습니다."
},
{
  "Elastic Search에 대해서 간단히 설명": "Elastic Search는 자바로 개발된 오픈소스 검색 엔진으로, Full-text 검색을 위해 Inverted Index 구조를 사용합니다. ELK 스택으로 더 확장할 수 있습니다."
},
{
  "Elastic Search의 인덱스구조와 RDBMS의 인덱스 구조의 차이에 대해 설명": "Elastic Search는 Inverted-Index 구조로 데이터를 저장하여 특정 단어가 포함된 문서를 빠르게 찾을 수 있습니다. 반면 RDBMS는 B-Tree와 유사한 인덱스 구조를 사용하여 데이터의 위치를 찾습니다."
},
{
  "Elastic Search의 키워드 검색과 RDBMS의 LIKE 검색의 차이에 대해 설명": "Elastic Search의 키워드 검색은 문서 저장 시 사용하는 알고리즘과 유사한 방식으로 키워드를 처리하며, 결과를 랭킹화하여 반환합니다. RDBMS의 LIKE 검색은 와일드카드에 따라 인덱스 사용 여부가 결정되며, 일반적으로 느립니다."
},
{
  "MongoDB에 대해서 간단히 설명": "MongoDB는 문서 지향적인 NoSQL 데이터베이스로, JSON 형식의 문서를 사용하여 데이터를 저장합니다. 대량의 비정형 데이터를 다루는 데 강점을 보입니다."
},
{
  "CAP 이론과, Eventual Consistency에 대해서 설명": "CAP 이론은 분산 환경에서 일관성(Consistency), 가용성(Availability), 분할 내성(Partition Tolerance) 중에 두 가지만 선택할 수 있다는 이론입니다. Eventual Consistency는 일관성을 즉각적으로 보장하지 않지만, 결국 일관성을 보장할 수 있는 시스템을 의미합니다."
}

]