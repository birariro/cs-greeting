[
    {"데이터 베이스의 트렌젝션": "트랜잭션이란 데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위라고 할 수 있으며, 트랜잭션에는 여러개의 연산이 수행될 수 있습니다.  트랜잭션은 수행중에 한 작업이라도 실패하면 전부 실패하고, 모두 성공해야 성공이라고 할 수 있습니다. "},

    {"데이터베이스의 트렌젝션 격리수준":
    "트랜잭션 격리수준은 고립도와 성능의 트레이드 오프를 조절합니다 READ UNCOMMITTED: 다른 트랜잭션에서 커밋되지 않은 내용도 참조할 수 있다.  READ COMMITTED: 다른 트랜잭션에서 커밋된 내용만 참조할 수 있다.  REPEATABLE READ: 트랜잭션에 진입하기 이전에 커밋된 내용만 참조할 수 있다.  SERIALIZABLE: 트랜잭션에 진입하면 락을 걸어 다른 트랜잭션이 접근하지 못하게 한다. (성능 매우 떨어짐)"},

    {"프로세스와 스레드의 차이": "프로세스는 운영체제로부터 자원을 할당받지만, 스레드는 프로세스로부터 자원을 할당받고, 프로세스의 코드/데이터/힙영역을 공유하기 때문에 좀 더 효율적으로 통신할 수 있습니다.  또한 컨텍스트 스위칭도 캐시 메모리를 비우지 않아도 되는 스레드쪽이 빠릅니다.  그리고, 스레드는 자원 공유로 인해 문제가 발생할 수 있으니 이를 염두에 둔 프로그래밍을 해야합니다. "},

    {"컨텍스트 스위칭":
    "컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다.  인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작합니다.  이 때, CPU는 아무런 일을 하지 않으므로 잦은 컨텍스트 스위칭은 성능저하를 일으킬 수 있습니다.  스레드와 프로세스의 동작방식이 약간 상이한데, 스레드는 캐시메모리나 PCB에 저장해야하는 내용이 적고, 비워야 하는 내용도 적기때문에 상대적으로 더 빠른 컨텍스트 스위칭이 일어날 수 있습니다. "},

    {
      "스레드와 프로세스의 차이(Difference between Thread and Process)": "프로세스는 운영체제에서 실행 중인 프로그램을 나타내며 각 프로세스는 독립된 메모리 공간을 갖습니다.  반면에 스레드는 프로세스 내에서 실행되는 작업 단위로, 같은 프로세스 내의 다른 스레드들과 메모리 공간을 공유합니다.  즉, 프로세스는 독립적인 실행 단위이고, 스레드는 같은 프로세스 내에서 동작하며 리소스를 공유합니다. "
    },
    {
      "서킷 브레이커 (Circuit Breaker)란?": "서킷 브레이커 패턴은 시스템의 특정 부분에서 장애가 발생했을 때 해당 부분에 대한 요청을 차단함으로써 전체 시스템의 장애를 방지하는 디자인 패턴입니다.  서킷 브레이커는 장애가 일정 횟수 이상 발생하면 '열림' 상태로 전환되어 요청을 바로 실패 처리하고, 일정 시간 후에 '반열림' 상태로 전환해 일부 요청을 허용하여 시스템 상태를 점검합니다. "
    },
    {
      "트랜잭션 격리 수준 (Transaction Isolation Level)이란?": "트랜잭션 격리 수준은 데이터베이스에서 동시에 실행되는 트랜잭션들이 서로 간섭하지 않도록 격리하는 방법을 정의합니다.  주요 수준으로는 Read Uncommitted(읽기 미완료), Read Committed(읽기 완료), Repeatable Read(반복 읽기), Serializable(직렬화 가능)가 있습니다.  각 수준은 데이터의 일관성과 동시성 처리 성능 사이에서 균형을 조정합니다. "
    },
    {
      "마이크로서비스 (Microservices)란?": "마이크로서비스 아키텍처는 단일 애플리케이션을 작은 독립적인 서비스들로 분리하여 각각을 독립적으로 배포하고 확장할 수 있도록 하는 소프트웨어 개발 방식입니다.  각 마이크로서비스는 자신만의 데이터 저장소를 가질 수 있으며, 서로 다른 기술 스택을 사용할 수도 있습니다.  이는 시스템의 유연성과 유지보수성을 높이는 장점이 있습니다. "
    },
    {
      "가비지 컬렉션 (Garbage Collection)이란?": "가비지 컬렉션은 프로그래밍 언어에서 더 이상 참조되지 않는 객체를 자동으로 메모리에서 해제하여 메모리 누수를 방지하는 메커니즘입니다.  이는 개발자가 수동으로 메모리를 관리해야 하는 부담을 줄이고, 프로그램의 안정성을 높입니다.  가비지 컬렉션은 Java와 C# 같은 언어에서 주로 사용됩니다. "
    },
    {
      "공간 복잡도 (Space Complexity)란?": "공간 복잡도는 알고리즘이 실행되는 동안 필요로 하는 메모리 공간의 양을 나타내는 척도입니다.  이는 입력 데이터의 크기에 따라 달라지며, 알고리즘의 효율성을 평가하는 중요한 요소 중 하나입니다.  예를 들어, 배열이나 링크드 리스트를 사용한 데이터 구조가 얼마나 많은 메모리를 차지하는지 분석합니다. "
    },
    {
      "데이터 정규화 (Data Normalization)란?": "데이터 정규화는 데이터베이스 설계에서 데이터의 중복을 최소화하고, 데이터의 무결성과 일관성을 유지하기 위해 데이터를 여러 테이블로 분리하고 관계를 설정하는 과정입니다.  주요 정규형으로는 1NF, 2NF, 3NF, BCNF 등이 있으며, 이를 통해 데이터베이스의 성능과 관리 효율성을 높일 수 있습니다. "
    },
    {
      "캐시 일관성 (Cache Coherence)란?": "캐시 일관성은 멀티프로세서 시스템에서 각 프로세서의 캐시에 저장된 데이터가 일관성을 유지하도록 하는 메커니즘입니다.  이는 여러 프로세서가 동일한 메모리 위치를 캐시에 저장하고 변경할 때, 모든 캐시가 최신 데이터를 유지하도록 합니다.  이를 통해 데이터 불일치 문제를 방지하고 시스템의 신뢰성을 높입니다. "
    },
    {
      "데이터베이스 샤딩 (Database Sharding)란?": "데이터베이스 샤딩은 대규모 데이터베이스를 수평으로 분할하여 여러 서버에 분산 저장하는 방법입니다.  각 샤드는 독립된 데이터베이스로 작동하며, 이를 통해 데이터베이스의 성능과 확장성을 크게 향상시킬 수 있습니다.  샤딩은 특히 대규모 트래픽과 데이터를 처리해야 하는 시스템에서 유용합니다. "
    },
    {
      "CI/CD (Continuous Integration/Continuous Deployment)란?": "CI/CD는 지속적인 통합(Continuous Integration)과 지속적인 배포(Continuous Deployment)를 의미합니다.  CI는 개발자가 코드 변경을 자주 병합하여 자동으로 빌드하고 테스트하는 과정이고, CD는 변경된 코드를 자동으로 배포하는 과정입니다.  이를 통해 개발 사이클을 단축하고, 소프트웨어의 품질과 신뢰성을 높일 수 있습니다. "
    },
    {
      "API 게이트웨이 (API Gateway)란?": "API 게이트웨이는 여러 API 서비스를 관리하고 라우팅하는 서버로, 클라이언트의 요청을 적절한 마이크로서비스로 전달하고, 인증, 로깅, 트래픽 제어 등의 기능을 수행합니다.  이는 단일 진입점을 제공하여 시스템의 복잡성을 줄이고 보안을 강화합니다. "
    },
    {
      "로드 밸런서 (Load Balancer)란?": "로드 밸런서는 여러 서버에 걸쳐 네트워크 또는 애플리케이션 트래픽을 분산시켜 시스템의 성능과 안정성을 높이는 장치 또는 소프트웨어입니다.  로드 밸런서는 서버 과부하를 방지하고 장애 조치(failover) 기능을 제공하여 고가용성을 보장합니다. "
    },
    {
      "쿠키와 세션의 차이 (Difference between Cookies and Sessions)": "쿠키는 클라이언트 측에 저장되는 작은 데이터 조각으로, 브라우저가 서버에 요청을 보낼 때 포함됩니다.  쿠키는 사용자의 상태를 유지하는 데 사용됩니다.  세션은 서버 측에 저장되며, 사용자 별로 고유한 세션 ID를 발급받아 사용자의 상태를 유지합니다.  세션 데이터는 서버에 저장되므로 보안성이 높습니다. "
    },
    {
      "REST와 SOAP의 차이 (Difference between REST and SOAP)": "REST는 경량의 웹 서비스 디자인 패턴으로 HTTP 프로토콜을 사용하여 자원에 접근하며, 주로 JSON 형식의 데이터를 주고받습니다.  SOAP는 XML 기반의 메시지 프로토콜로, 더 복잡하고 엄격한 규격을 따르며, 다양한 전송 프로토콜을 지원합니다.  REST는 유연하고 간단한 구현을 제공하고, SOAP는 높은 보안성과 트랜잭션 관리 기능을 제공합니다. "
    },
    {
      "NoSQL과 SQL의 차이 (Difference between NoSQL and SQL)": "SQL 데이터베이스는 정형 데이터를 테이블 형식으로 저장하며, 관계형 모델을 따릅니다.  NoSQL 데이터베이스는 비정형 데이터를 다양한 형식(문서, 키-값, 그래프 등)으로 저장하며, 스키마가 유연합니다.  SQL 데이터베이스는 ACID 속성을 보장하지만, NoSQL 데이터베이스는 대규모 데이터와 고성능 요구를 위해 설계되어 일관성과 가용성 중 하나를 선택할 수 있습니다. "
    },
    {
      "CAP 정리 (CAP Theorem)란?": "CAP 정리는 분산 시스템에서 Consistency(일관성), Availability(가용성), Partition Tolerance(파티션 허용성) 중에서 두 가지만 보장할 수 있다는 이론입니다.  일관성은 모든 노드가 동일한 데이터를 가지는 것을 의미하고, 가용성은 모든 요청이 응답을 받는 것을 의미하며, 파티션 허용성은 네트워크 분할 시에도 시스템이 동작할 수 있는 것을 의미합니다. "
    },
    {
      "데브옵스 (DevOps)란?": "데브옵스는 개발(Development)과 운영(Operations)의 합성어로, 소프트웨어 개발과 IT 운영을 협력하여 소프트웨어의 배포 속도를 높이고 품질을 향상시키는 문화와 실천을 의미합니다.  데브옵스는 지속적 통합(CI)과 지속적 배포(CD)를 통해 코드 변경을 빠르고 안전하게 배포하는 것을 목표로 합니다. "
    },
    {
      "도커 (Docker)란?": "도커는 애플리케이션을 컨테이너라는 독립된 환경에서 실행할 수 있게 해주는 오픈소스 플랫폼으로, 일관된 개발 및 배포 환경을 제공합니다.  도커 컨테이너는 애플리케이션과 그 의존성을 함께 묶어 이식성과 일관성을 보장하며, 효율적인 자원 관리를 제공합니다. "
    },
    {
      "가상 머신과 컨테이너의 차이 (Difference between Virtual Machines and Containers)": "가상 머신은 하드웨어를 가상화하여 여러 운영체제를 실행할 수 있으며, 각 운영체제가 독립된 리소스를 갖습니다.  반면, 컨테이너는 운영체제를 공유하면서 애플리케이션을 격리하여 실행하며, 더 가볍고 빠릅니다.  컨테이너는 애플리케이션과 그 의존성을 포함하지만, 가상 머신은 전체 운영체제를 포함합니다. "
    },
    {
      "트랜잭션 로그 (Transaction Log)란?": "트랜잭션 로그는 데이터베이스에서 모든 트랜잭션 활동을 기록하는 파일로, 데이터 복구와 복제에 사용됩니다.  이는 데이터 무결성을 유지하고, 시스템 장애 발생 시 데이터를 복원하는 데 중요한 역할을 합니다. "
    },
    {
      "ACID 속성 (ACID Properties)이란?": "ACID는 데이터베이스 트랜잭션의 신뢰성을 보장하는 네 가지 속성으로, 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), 지속성(Durability)을 의미합니다.  원자성은 모든 작업이 완전히 완료되거나 전혀 실행되지 않는 것을 보장하고, 일관성은 데이터베이스가 일관된 상태를 유지하도록 합니다.  고립성은 트랜잭션 간의 간섭을 방지하고, 지속성은 트랜잭션 완료 후 데이터가 영구적으로 저장되도록 합니다. "
    },
    {
      "파이프라인 (Pipeline)이란?": "파이프라인은 데이터 처리나 소프트웨어 빌드, 배포 과정에서 여러 단계의 작업을 정의하고 자동으로 실행하는 방식입니다.  파이프라인은 작업의 자동화와 효율적인 관리를 가능하게 하여, 개발 및 운영 프로세스를 최적화합니다. "
    },
    {
      "리팩토링 (Refactoring)란?": "리팩토링은 코드의 기능은 유지하면서 내부 구조를 개선하여 가독성과 유지보수성을 높이는 과정입니다.  이는 코드 품질을 향상시키고, 버그를 줄이며, 새로운 기능 추가를 용이하게 합니다. "
    },
    {
      "인덱스 (Index)란?": "데이터베이스에서 인덱스는 데이터를 빠르게 검색할 수 있도록 도와주는 데이터 구조입니다.  인덱스는 테이블의 특정 열에 대해 생성되며, 검색 성능을 크게 향상시킬 수 있습니다. "
    },
    {
      "RAID (Redundant Array of Independent Disks)란?": "RAID는 여러 디스크를 하나의 논리적 단위로 묶어 데이터 중복 저장, 성능 향상, 데이터 보호를 제공하는 기술입니다.  RAID의 여러 레벨(예: RAID 0, RAID 1, RAID 5)은 성능과 데이터 보호 간의 다양한 균형을 제공합니다. "
    },
    {
      "블루/그린 배포 (Blue/Green Deployment)란?": "블루/그린 배포는 두 개의 동일한 프로덕션 환경을 운영하여, 하나의 환경에서 새로운 버전을 배포하고 테스트한 후 문제가 없으면 트래픽을 전환하는 방식입니다.  이는 배포 중단 없이 새로운 버전을 배포할 수 있게 하며, 롤백이 용이합니다. "
    },
    {
      "캐시 미스 (Cache Miss)란?": "캐시 미스는 캐시 메모리에 원하는 데이터가 없어서 데이터를 주 메모리에서 가져와야 하는 상황을 의미합니다.  캐시 미스는 시스템 성능에 영향을 미치며, 이를 최소화하는 것이 중요합니다. "
    },
    {
      "CQRS (Command Query Responsibility Segregation)란?": "CQRS는 명령(데이터 수정)과 조회(데이터 읽기)를 분리하여 각각 다른 모델을 사용하는 패턴입니다.  이는 읽기 및 쓰기 작업을 최적화하고, 복잡한 비즈니스 로직을 관리하는 데 도움을 줍니다. "
    },
    {
      "메모리 누수 (Memory Leak)란?": "메모리 누수는 프로그램이 더 이상 필요하지 않은 메모리를 해제하지 않아 사용 가능한 메모리가 점차 줄어드는 현상입니다.  이는 프로그램의 성능을 저하시킬 수 있으며, 심각한 경우 시스템 충돌을 일으킬 수 있습니다. "
    },
    {
      "회귀 테스트 (Regression Testing)란?": "회귀 테스트는 소프트웨어 수정 후 기존 기능이 의도한 대로 작동하는지 확인하는 테스트 과정입니다.  이는 새로운 버그가 발생하지 않도록 보장하는 중요한 단계입니다. "
    },
    {
      "단위 테스트 (Unit Testing)란?": "단위 테스트는 소프트웨어의 개별 구성 요소를 독립적으로 테스트하여 올바르게 동작하는지 확인하는 과정입니다.  이는 코드 품질을 높이고, 결함을 조기에 발견하는 데 도움을 줍니다. "
    },
    {
      "회귀 모델 (Regression Model)란?": "회귀 모델은 통계적 기법을 사용하여 변수 간의 관계를 모델링하고, 하나의 종속 변수와 하나 이상의 독립 변수 간의 관계를 예측하는 데 사용됩니다. "
    },
    {
      "RDBMS와 NoSQL의 차이 (Difference between RDBMS and NoSQL)": "RDBMS는 관계형 데이터베이스 관리 시스템으로, 데이터를 테이블로 구성하고 SQL을 사용하여 데이터를 관리합니다.  NoSQL은 비관계형 데이터베이스로, 유연한 스키마와 다양한 데이터 모델을 제공하며, 대규모 데이터와 높은 처리 성능을 지원합니다. "
    },
    {
      "데이터 마이그레이션 (Data Migration)란?": "데이터 마이그레이션은 한 시스템에서 다른 시스템으로 데이터를 이동하는 과정으로, 데이터베이스 변경, 시스템 업그레이드, 클라우드 전환 등의 상황에서 필요합니다. "
    },
    {
      "ORM (Object-Relational Mapping)란?": "ORM은 객체 지향 프로그래밍 언어를 사용하여 관계형 데이터베이스의 데이터를 조작하는 기술로, 객체와 데이터베이스 간의 매핑을 자동화하여 개발 생산성을 높입니다. "
    },
    {
      "대기열 (Queue)란?": "대기열은 FIFO(First In, First Out) 원칙에 따라 데이터를 저장하고 처리하는 데이터 구조로, 메시지 큐와 작업 대기열 등에 사용됩니다. "
    },

    {
      "캐시 (Cache)란?": "캐시는 데이터를 임시로 저장하여 데이터 접근 속도를 높이는 메모리 영역입니다. 주로 자주 사용되는 데이터나 계산 결과를 저장하여, 반복된 요청 시 빠르게 응답할 수 있도록 합니다. CPU 캐시, 디스크 캐시, 웹 브라우저 캐시 등이 있습니다."
    },
    {
      "하둡 (Hadoop)란?": "하둡은 대규모 데이터를 분산 처리하기 위한 오픈소스 프레임워크입니다. 하둡은 HDFS(Hadoop Distributed File System)와 맵리듀스(MapReduce) 프로그래밍 모델을 사용하여 대량의 데이터를 분산 저장 및 처리할 수 있게 합니다."
    },
    {
      "데이터 웨어하우스 (Data Warehouse)란?": "데이터 웨어하우스는 다양한 출처에서 수집된 대량의 데이터를 통합, 분석, 보고하기 위해 중앙 집중식으로 저장하는 시스템입니다. 이는 의사 결정 지원 시스템(DSS)을 위한 주요 데이터 저장소로 사용됩니다."
    },
    {
      "도커 스웜 (Docker Swarm)란?": "도커 스웜은 도커 컨테이너를 클러스터링하고 오케스트레이션하는 도구로, 여러 호스트에서 컨테이너를 관리하고 확장할 수 있도록 지원합니다. 이는 도커 환경에서 서비스 배포, 확장, 관리 작업을 자동화합니다."
    },
    {
      "캄만 필터 (Kalman Filter)란?": "캄만 필터는 시계열 데이터의 노이즈를 줄이고 정확한 상태 추정을 하기 위한 알고리즘입니다. 주로 로봇 공학, 항공 우주, 신호 처리 등에서 사용됩니다."
    },
    {
      "리눅스 커널 (Linux Kernel)란?": "리눅스 커널은 리눅스 운영체제의 핵심 부분으로, 하드웨어와 소프트웨어 간의 상호 작용을 관리합니다. 파일 시스템, 프로세스 관리, 메모리 관리, 네트워크 스택 등의 기능을 제공합니다."
    },
    {
      "스프링 프레임워크 (Spring Framework)란?": "스프링 프레임워크는 자바 플랫폼을 위한 애플리케이션 프레임워크로, 종속성 주입(Dependency Injection), AOP(Aspect-Oriented Programming), 트랜잭션 관리 등의 기능을 제공합니다. 이는 엔터프라이즈급 애플리케이션 개발을 용이하게 합니다."
    },
    {
      "그라파나 (Grafana)란?": "그라파나는 시각화 및 모니터링 도구로, 다양한 데이터 소스에서 수집된 데이터를 대시보드 형태로 시각화하여 실시간 모니터링 및 분석을 할 수 있게 합니다."
    },
    {
      "서버리스 컴퓨팅 (Serverless Computing)란?": "서버리스 컴퓨팅은 개발자가 서버를 관리하지 않고 코드를 실행할 수 있게 하는 클라우드 컴퓨팅 모델입니다. AWS Lambda, Azure Functions, Google Cloud Functions 등이 있으며, 이벤트 기반으로 동작합니다."
    },
    {
      "프록시 서버 (Proxy Server)란?": "프록시 서버는 클라이언트와 서버 사이에서 중계 역할을 하는 서버로, 클라이언트의 요청을 받아 서버에 전달하고, 서버의 응답을 클라이언트에 전달합니다. 보안, 캐싱, 로드 밸런싱 등의 목적으로 사용됩니다."
    },
    {
      "CI/CD 파이프라인 (CI/CD Pipeline)란?": "CI/CD 파이프라인은 지속적 통합(Continuous Integration)과 지속적 배포(Continuous Deployment) 과정을 자동화한 것으로, 코드 변경 사항을 자동으로 빌드, 테스트, 배포하여 개발 속도와 품질을 향상시킵니다."
    },
    {
      "SSL/TLS (Secure Sockets Layer / Transport Layer Security)란?": "SSL과 TLS는 네트워크 통신의 보안을 위해 사용되는 프로토콜로, 데이터를 암호화하여 전송 중에 보호합니다. HTTPS는 TLS를 사용하는 HTTP입니다."
    },
    {
      "데이터 레이크 (Data Lake)란?": "데이터 레이크는 다양한 형식의 원시 데이터를 저장하는 중앙 저장소로, 대규모 데이터를 유연하게 저장하고 분석할 수 있습니다. 구조화된 데이터, 비구조화된 데이터 모두 저장할 수 있습니다."
    },
    {
      "쿼럼 (Quorum)란?": "쿼럼은 분산 시스템에서 합의를 위해 필요한 최소한의 노드 수를 의미합니다. 이는 시스템의 일관성과 가용성을 유지하는 데 중요한 역할을 합니다."
    },
    {
      "애자일 방법론 (Agile Methodology)란?": "애자일 방법론은 소프트웨어 개발에서 반복적이고 점진적인 개발을 통해 유연하고 신속하게 응답할 수 있도록 하는 개발 방법론입니다. 스크럼(Scrum), 칸반(Kanban) 등이 포함됩니다."
    },
    {
      "웹 소켓 (WebSocket)란?": "웹 소켓은 웹 클라이언트와 서버 간의 전이중 통신을 가능하게 하는 프로토콜로, 실시간 데이터 전송에 사용됩니다. 이는 HTTP와 달리 연결을 유지하여 양방향 통신을 지원합니다."
    },
    {
      "SaaS (Software as a Service)란?": "SaaS는 클라우드에서 소프트웨어를 서비스 형태로 제공하는 모델로, 사용자는 소프트웨어를 설치할 필요 없이 인터넷을 통해 접근하고 사용할 수 있습니다. 대표적인 예로는 Google Workspace, Microsoft 365 등이 있습니다."
    },
    {
      "PaaS (Platform as a Service)란?": "PaaS는 클라우드에서 애플리케이션 개발 및 배포 플랫폼을 제공하는 서비스로, 개발자는 인프라를 관리할 필요 없이 애플리케이션을 개발하고 배포할 수 있습니다. 예로는 Heroku, Google App Engine이 있습니다."
    },
    {
      "IaaS (Infrastructure as a Service)란?": "IaaS는 클라우드에서 컴퓨팅 리소스(서버, 스토리지, 네트워크)를 가상화하여 제공하는 서비스로, 사용자는 필요한 인프라를 유연하게 사용할 수 있습니다. AWS EC2, Microsoft Azure가 예입니다."
    },
    {
      "API 레이트 리미팅 (API Rate Limiting)란?": "API 레이트 리미팅은 특정 기간 동안 클라이언트가 API에 요청할 수 있는 횟수를 제한하여 서버 자원을 보호하고, 악의적인 트래픽을 방지하는 메커니즘입니다."
    }
]
